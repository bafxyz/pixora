const { createClient } = require('@supabase/supabase-js')
const fs = require('node:fs')
const path = require('node:path')

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: path.join(__dirname, '../.env.local') })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey =
  process.env.SUPABASE_SERVICE_ROLE_KEY ||
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function runMigration() {
  try {
    console.log('üöÄ Starting multi-tenant migration...')

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(
      __dirname,
      '../supabase/migrations/001_multi_tenant.sql'
    )
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = migrationSQL
      .split(';')
      .map((cmd) => cmd.trim())
      .filter((cmd) => cmd.length > 0)

    console.log(`üìã Found ${commands.length} SQL commands to execute`)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i]
      if (command.trim()) {
        console.log(`‚ö° Executing command ${i + 1}/${commands.length}...`)
        try {
          const { error } = await supabase.rpc('exec_sql', { sql: command })
          if (error) {
            console.error(`‚ùå Error in command ${i + 1}:`, error)
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏
          } else {
            console.log(`‚úÖ Command ${i + 1} executed successfully`)
          }
        } catch (err) {
          console.error(`‚ùå Failed to execute command ${i + 1}:`, err.message)
        }
      }
    }

    console.log('üéâ Migration completed!')
    console.log(
      'üìù Note: Some commands may have failed if tables already exist - this is normal.'
    )
  } catch (error) {
    console.error('üí• Migration failed:', error)
    process.exit(1)
  }
}

runMigration()
