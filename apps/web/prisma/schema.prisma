// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}


enum PhotoSessionStatus {
  created
  active
  completed
  archived
}

model Client {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  phone     String?
  address   String?
  branding  Json?
  settings  Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  photographers Photographer[]
  photos        Photo[]
  photoSessions PhotoSession[]

  @@map("clients")
}

model Photographer {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String?
  phone     String?
  clientId  String   @map("client_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz
  branding  Json?

  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photos        Photo[]
  photoSessions PhotoSession[]

  @@map("photographers")
}


model Photo {
  id             String    @id @default(uuid()) @db.Uuid
  photographerId String    @map("photographer_id") @db.Uuid
  clientId       String    @map("client_id") @db.Uuid
  photoSessionId String    @map("photo_session_id") @db.Uuid
  filePath       String    @map("file_path")
  fileName       String    @map("file_name")
  fileSize       Int?      @map("file_size")
  isSelected     Boolean   @default(false) @map("is_selected")
  expiresAt      DateTime? @map("expires_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  photographer Photographer @relation(fields: [photographerId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photoSession PhotoSession @relation(fields: [photoSessionId], references: [id], onDelete: Cascade)

  @@map("photos")
}


model PhotoSession {
  id             String             @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  photographerId String             @map("photographer_id") @db.Uuid
  clientId       String             @map("client_id") @db.Uuid
  status         PhotoSessionStatus @default(created)
  scheduledAt    DateTime?          @map("scheduled_at") @db.Timestamptz
  completedAt    DateTime?          @map("completed_at") @db.Timestamptz
  settings       Json?
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz

  photographer Photographer @relation(fields: [photographerId], references: [id])
  client       Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  photos       Photo[]

  @@map("photo_sessions")
}
