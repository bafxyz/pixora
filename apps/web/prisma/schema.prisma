// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum PhotoSessionStatus {
  created
  active
  completed
  archived
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

enum PaymentMethod {
  cash
  tinkoff
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

enum NotificationType {
  new_order
  order_status_changed
  payment_received
}

enum ProductType {
  print // Print photo
  magnet // Photo magnet
  digital // Digital copy
}

model Studio {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String   @unique
  phone     String?
  address   String?
  settings  Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  studioAdmins  StudioAdmin[]
  photographers Photographer[]
  photos        Photo[]
  photoSessions PhotoSession[]
  orders        Order[]
  guests        Guest[]
  pricing       Pricing[]

  @@map("studios")
}

model StudioAdmin {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String?
  phone     String?
  studioId  String   @map("studio_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@map("studio_admins")
}

model Photographer {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String?
  phone     String?
  studioId  String   @map("studio_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz

  studio        Studio         @relation(fields: [studioId], references: [id], onDelete: Cascade)
  photos        Photo[]
  photoSessions PhotoSession[]
  orders        Order[]
  guests        Guest[]

  @@map("photographers")
}

model Photo {
  id             String    @id @default(uuid()) @db.Uuid
  photographerId String    @map("photographer_id") @db.Uuid
  studioId       String    @map("studio_id") @db.Uuid
  photoSessionId String    @map("photo_session_id") @db.Uuid
  filePath       String    @map("file_path")
  fileName       String    @map("file_name")
  fileSize       Int?      @map("file_size")
  isSelected     Boolean   @default(false) @map("is_selected")
  expiresAt      DateTime? @map("expires_at") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  studio       Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  photoSession PhotoSession @relation(fields: [photoSessionId], references: [id], onDelete: Cascade)
  orderItems   OrderItem[]

  @@map("photos")
}

model PhotoSession {
  id             String             @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  photographerId String             @map("photographer_id") @db.Uuid
  studioId       String             @map("studio_id") @db.Uuid
  status         PhotoSessionStatus @default(created)
  scheduledAt    DateTime?          @map("scheduled_at") @db.Timestamptz
  completedAt    DateTime?          @map("completed_at") @db.Timestamptz
  settings       Json?
  createdAt      DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime           @updatedAt @map("updated_at") @db.Timestamptz

  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  studio       Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  photos       Photo[]
  orders       Order[]
  guests       Guest[]

  @@map("photo_sessions")
}

model Order {
  id             String  @id @default(uuid()) @db.Uuid
  studioId       String  @map("studio_id") @db.Uuid
  photographerId String  @map("photographer_id") @db.Uuid
  sessionId      String  @map("session_id") @db.Uuid
  guestId        String? @map("guest_id") @db.Uuid
  guestEmail     String  @map("guest_email")
  guestName      String? @map("guest_name")
  guestPhone     String? @map("guest_phone")

  status        OrderStatus   @default(pending)
  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @default(pending) @map("payment_status")

  totalAmount Decimal @map("total_amount") @db.Decimal(10, 2)
  discount    Decimal @default(0) @map("discount") @db.Decimal(10, 2)
  finalAmount Decimal @map("final_amount") @db.Decimal(10, 2)

  // Tinkoff payment data
  tinkoffPaymentId   String? @map("tinkoff_payment_id")
  tinkoffPaymentLink String? @map("tinkoff_payment_link")
  tinkoffReceipt     String? @map("tinkoff_receipt")

  notes       String?
  processedAt DateTime? @map("processed_at") @db.Timestamptz
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  studio       Studio       @relation(fields: [studioId], references: [id], onDelete: Cascade)
  photographer Photographer @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  session      PhotoSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  guest        Guest?       @relation(fields: [guestId], references: [id])
  items        OrderItem[]

  @@map("orders")
}

model Guest {
  id             String  @id @default(uuid()) @db.Uuid
  email          String  @unique
  name           String?
  phone          String?
  studioId       String  @map("studio_id") @db.Uuid
  photographerId String? @map("photographer_id") @db.Uuid
  sessionId      String? @map("session_id") @db.Uuid

  // QR code for guest identification
  qrCode String? @unique @map("qr_code")

  // Guest preferences and data
  preferences Json?
  metadata    Json?

  // Activity tracking
  lastAccessAt DateTime? @map("last_access_at") @db.Timestamptz
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  studio       Studio        @relation(fields: [studioId], references: [id], onDelete: Cascade)
  photographer Photographer? @relation(fields: [photographerId], references: [id], onDelete: Cascade)
  session      PhotoSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  orders       Order[]

  @@map("guests")
}

model OrderItem {
  id          String      @id @default(uuid()) @db.Uuid
  orderId     String      @map("order_id") @db.Uuid
  photoId     String?     @map("photo_id") @db.Uuid
  productType ProductType @default(digital) @map("product_type")
  quantity    Int         @default(1)
  price       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz

  order Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  photo Photo? @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Pricing {
  id                    String   @id @default(uuid()) @db.Uuid
  studioId              String   @map("studio_id") @db.Uuid
  priceDigital          Decimal  @default(500) @map("price_digital") @db.Decimal(10, 2)
  pricePrint            Decimal  @default(750) @map("price_print") @db.Decimal(10, 2)
  priceMagnet           Decimal  @default(750) @map("price_magnet") @db.Decimal(10, 2)
  enableDigital         Boolean  @default(true) @map("enable_digital")
  enablePrint           Boolean  @default(true) @map("enable_print")
  enableMagnet          Boolean  @default(true) @map("enable_magnet")
  bulkDiscountThreshold Int      @default(20) @map("bulk_discount_threshold")
  bulkDiscountPercent   Int      @default(15) @map("bulk_discount_percent")
  currency              String   @default("RUB")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt             DateTime @updatedAt @map("updated_at") @db.Timestamptz

  studio Studio @relation(fields: [studioId], references: [id], onDelete: Cascade)

  @@map("pricing")
}

model Notification {
  id             String           @id @default(uuid()) @db.Uuid
  type           NotificationType
  recipientEmail String           @map("recipient_email")
  orderId        String           @map("order_id") @db.Uuid
  title          String
  message        String
  isRead         Boolean          @default(false) @map("is_read")
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz
  readAt         DateTime?        @map("read_at") @db.Timestamptz

  @@map("notifications")
}
